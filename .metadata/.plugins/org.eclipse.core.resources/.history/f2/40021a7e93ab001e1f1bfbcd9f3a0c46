package com.lgy.spring_16_fileUpload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.management.openmbean.ArrayType;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import com.lgy.spring_16_fileUpload.domain.AttachFileDTO;

import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;

@org.springframework.stereotype.Controller
@Slf4j
public class Controller {

	@GetMapping("/uploadForm")
	public void uploadForm() {
		log.info("This is uploadForm.");
		
	}
//	uploadFormAction.jsp를 찾아감
	@PostMapping("/uploadFormAction")
	public void uploadFormPost(MultipartFile[] uploadFile) {
		String uploadFolder = "D:\\dev\\upload";
		for(MultipartFile multipartFile : uploadFile) {
			log.info("====================");
//			getOriginalFilename : 업로드되는 파일 이름
			log.info("@# 업로드 되는 파일 이름 ==>"+multipartFile.getOriginalFilename());
//			getSize : 파일 크기
			log.info("@# 업로드 되는 파일 크기 ==>"+multipartFile.getSize());
//			File(저장경로,파일이름) 객체를 생성해서 saveFile로 받음.
			File saveFile = new File(uploadFolder,multipartFile.getOriginalFilename());
			try{
//				transferTo : savaFile 내용을 저장
				multipartFile.transferTo(saveFile);
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	@GetMapping("/uploadJquery")
	public void uploadJquery() {
		log.info("uploadJquery~!!!");
	}
	
	@PostMapping("/uploadAjaxAction")
//	ResponseEntity : 파일 정보를 넘기기위해서 사용
	public ResponseEntity<List<AttachFileDTO>> uploadAjaxPost(MultipartFile[] uploadFile) {
		log.info("@# uploadAjaxPost");
		
		List<AttachFileDTO> list = new ArrayList<AttachFileDTO>();
		
		String uploadFolder = "D:\\dev\\upload";
		String uploadFolderPath =  getFolder();
//		D:\\dev\\upload+년/월/일 폴더
		File uploadPath =new File(uploadFolder,uploadFolderPath);
		log.info("@# uploadPath =>"+uploadPath);
		if(uploadPath.exists()==false) { // uploadPath가 없으면
//			make yyyy/mm/dd folder 디렉토리를 만든다. (중복생성 방지)
			uploadPath.mkdirs();
		}
		
		
		for(MultipartFile multipartFile : uploadFile) {
			log.info("====================");
			log.info("@#uploadAjaxPost 파일 이름 ==>"+multipartFile.getOriginalFilename());
			log.info("@#uploadAjaxPost 파일 크기 ==>"+multipartFile.getSize());
//			File saveFile = new File(uploadFolder,multipartFile.getOriginalFilename());
//			File(저장경로_날짜별 처리된폴더,업로드할 파일) 객체 생성
			
			String uploadFileName = multipartFile.getOriginalFilename();
//			중복이름을 방지하기위한 무작위 문자생성 객체 UUID
			UUID uuid = UUID.randomUUID();
			log.info("@##@ uuid ==>"+uuid);
			
			AttachFileDTO attachFileDTO = new AttachFileDTO();
			attachFileDTO.setFileName(uploadFileName);
			attachFileDTO.setUuid(uuid.toString());
			attachFileDTO.setUploadPath(uploadFolderPath);
			log.info("@# attachFileDTO ==>"+attachFileDTO);
			
//			uuid_파일이름 형식으로 변경
			uploadFileName = uuid +"_"+uploadFileName;
			
//			파일을 저장할 saveFile 객체 생성(저장경로,uuid를 붙인 파일이름)
			File saveFile = new File(uploadPath,uploadFileName);
			try{
//				transferTo : saveFile 내용을 저장
				multipartFile.transferTo(saveFile);
//				저장할 File(saveFile)이 이미지파일이라면, 썸네일 파일을 만든다.
				if(checkImageType(saveFile)) {
//					이미지파일이라면 attachFileDTo의 Image 속성도 true로 변경
					attachFileDTO.setImage(true);
					
//					썸네일 파일은 s_을 앞에 추가
					FileOutputStream thumnail = 
					new FileOutputStream(new File(uploadPath,"s_"+uploadFileName));
//					Thumbnailator 라이브러리를 통해 썸네일 파일 형식을 100/100 크기로 생성
					Thumbnailator.createThumbnail(multipartFile.getInputStream(),thumnail,100,100);
					thumnail.close();
				}
//				list에 attachFileDTO를 담음
				list.add(attachFileDTO);
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
//		ResponseEntity 객체의 body에 list를 넣고, http상태 OK로 하는 객체 생성해서 리턴
		return new ResponseEntity<List<AttachFileDTO>>(list, HttpStatus.OK);
	}
//	날짜별로 폴더를 생성하는 메소드
	private String getFolder() {
		SimpleDateFormat sdf =new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		log.info("@#str : "+str);
		log.info("@#separator : "+File.separator);
//		년-월-일 형식 replace: "-"를 "/"로 바꾼다.
		return str.replace("-",File.separator);
	}
	
//	썸네일 만들기위해 먼저 이미지 여부 체크(이미지 파일이면 true)
	public boolean checkImageType(File file) {
		try {
//		probeContentType : 이미지 파일인지 체크하기 위한 타입
			String contentType = Files.probeContentType(file.toPath());
			log.info("contentType ==>"+contentType);
//			startsWith : 파일 종류 판단(image 파일이면 true)
			log.info("startsWith ==>"+contentType.startsWith("image"));
			return contentType.startsWith("image");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}
	
}
