package com.lgy.spring_16_fileUpload;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@org.springframework.stereotype.Controller
@Slf4j
public class Controller {

	@GetMapping("/uploadForm")
	public void uploadForm() {
		log.info("This is uploadForm.");
		
	}
//	uploadFormAction.jsp를 찾아감
	@PostMapping("/uploadFormAction")
	public void uploadFormPost(MultipartFile[] uploadFile) {
		String uploadFolder = "D:\\dev\\upload";
		for(MultipartFile multipartFile : uploadFile) {
			log.info("====================");
//			getOriginalFilename : 업로드되는 파일 이름
			log.info("@# 업로드 되는 파일 이름 ==>"+multipartFile.getOriginalFilename());
//			getSize : 파일 크기
			log.info("@# 업로드 되는 파일 크기 ==>"+multipartFile.getSize());
//			File(저장경로,파일이름) 객체를 생성해서 saveFile로 받음.
			File saveFile = new File(uploadFolder,multipartFile.getOriginalFilename());
			try{
//				transferTo : savaFile 내용을 저장
				multipartFile.transferTo(saveFile);
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	@GetMapping("/uploadJquery")
	public void uploadJquery() {
		log.info("uploadJquery~!!!");
	}
	
	@PostMapping("/uploadAjaxAction")
	public void uploadAjaxPost(MultipartFile[] uploadFile) {
		String uploadFolder = "D:\\dev\\upload";
		String uploadFolderPath =  getFolder();
//		D:\\dev\\upload+년/월/일 폴더
		File uploadPath =new File(uploadFolder,uploadFolderPath);
		log.info("@# uploadPath =>"+uploadPath);
		if(uploadPath.exists()==false) { // uploadPath가 없으면
//			make yyyy/mm/dd folder 디렉토리를 만든다. (중복생성 방지)
			uploadPath.mkdirs();
		}
		
		
		for(MultipartFile multipartFile : uploadFile) {
			log.info("====================");
			log.info("@#uploadAjaxPost 파일 이름 ==>"+multipartFile.getOriginalFilename());
			log.info("@#uploadAjaxPost 파일 크기 ==>"+multipartFile.getSize());
//			File saveFile = new File(uploadFolder,multipartFile.getOriginalFilename());
//			File(저장경로_날짜별 처리된폴더,업로드할 파일) 객체 생성
			
			String uploadFileName = multipartFile.getOriginalFilename();
//			중복이름을 방지하기위한 무작위 문자 생성 객체 UUID
			UUID uuid = UUID.randomUUID();
			log.info("@##@ uuid ==>"+uuid);
//			uuid_파일이름 형식으로 변경
			uploadFileName = uuid +"_"+uploadFileName;
			
//			파일을 저장할 saveFile 객체 생성(저장경로,uuid를 붙인 파일이름)
			File saveFile = new File(uploadPath,uploadFileName);
			try{
				multipartFile.transferTo(saveFile);
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
		
	}
//	날짜별로 폴더를 생성하는 메소드
	private String getFolder() {
		SimpleDateFormat sdf =new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		log.info("@#str : "+str);
		log.info("@#separator : "+File.separator);
//		년-월-일 형식 replace: "-"를 "/"로 바꾼다.
		return str.replace("-",File.separator);
	}
	
}
