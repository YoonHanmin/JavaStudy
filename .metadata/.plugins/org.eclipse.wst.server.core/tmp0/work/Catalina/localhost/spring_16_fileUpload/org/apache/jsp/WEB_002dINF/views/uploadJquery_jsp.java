/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-01-08 00:18:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadJquery_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("	.uploadResult{\r\n");
      out.write("		width : 100%;\r\n");
      out.write("		background-color: gray;\r\n");
      out.write("	}\r\n");
      out.write("	.uploadResult ul{\r\n");
      out.write("		display : flex;\r\n");
      out.write("		flex-flow : row;\r\n");
      out.write("		justify-content : center;\r\n");
      out.write("		align-items : center;\r\n");
      out.write("	}\r\n");
      out.write("	.uploadResult ul li{\r\n");
      out.write("		list-style : none;\r\n");
      out.write("		padding : 10px;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	.uploadResult ul li img{\r\n");
      out.write("		width : 20px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<!-- jquery를 통해 파일 업로드할때 클라이언트단에서 업로드된 파일의 정보를 읽어 Ajax 방식으로 서버에 전송한다. -->\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("// 		ready : HTML 요소가 다 읽어지면 실행\r\n");
      out.write("		$(document).ready(function(){\r\n");
      out.write("// 			파일을 담기위한 객체 생성\r\n");
      out.write("// 			확장자가 exe,sh,js인 파일 업로드를 금지하기위한 정규식\r\n");
      out.write("			var regex = new RegExp(\"(.*?)\\.(exe|sh|js)$\")\r\n");
      out.write("			var maxSize = 5242880; // 5MB\r\n");
      out.write("			\r\n");
      out.write("// 			업로드할 파일이 들어있는 formdata안에 모든 키를 삭제하는 메소드 선언(초기화를 위해)\r\n");
      out.write("			function clearFormData(formData) {\r\n");
      out.write("			    // 모든 키를 순회하면서 삭제\r\n");
      out.write("//			for of 문 : 모든 원소를 순회하면서 각각의 원소를 가지고 반복문 실행 \r\n");
      out.write("			    for (var key of formData.keys()) { \r\n");
      out.write("			        formData.delete(key);\r\n");
      out.write("			    }\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function checkExtension(fileName,fileSize){\r\n");
      out.write("				if (fileSize>maxSize) {\r\n");
      out.write("					alert(\"파일 사이즈 초과\");\r\n");
      out.write("					return false;		\r\n");
      out.write("				}\r\n");
      out.write("				if(regex.test(fileName)){\r\n");
      out.write("					alert(\"해당 종류의 파일은 업로드할 수 없습니다.\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				return true;\r\n");
      out.write("			}\r\n");
      out.write("			var formData = new FormData();\r\n");
      out.write("// 			업로드 하기전, 초기 HTML 상태의 uploadDiv요소를 복제해놓음 (업로드후 HTML요소 초기화를 위해)\r\n");
      out.write("			var cloneObj = $(\".uploadDiv\").clone();\r\n");
      out.write("			console.log(\"@#@CloneObj ===> \"+cloneObj);\r\n");
      out.write("			\r\n");
      out.write("			$(\"#uploadBtn\").on(\"click\",function(){\r\n");
      out.write("// 				uploadFile이름의 input 속성을 변수로 받음\r\n");
      out.write("			var inputFile = $(\"input[name='uploadFile']\");\r\n");
      out.write("// 			files : 파일 정보 속성\r\n");
      out.write("			var files = inputFile[0].files;\r\n");
      out.write("			console.log(\"files ==>\"+files);\r\n");
      out.write("			\r\n");
      out.write("// 			files.length : 파일 갯수\r\n");
      out.write("			for (var i = 0; i < files.length; i++) {\r\n");
      out.write("// 				파일 크기와 종류가 false면 return(종료)\r\n");
      out.write("				if(!checkExtension(files[i].name,files[i].size)){\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("// 				append(이름,파일): 파일 정보를 formData에 추가\r\n");
      out.write("				formData.append(\"uploadFile\",files[i])\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("// 			업로드한 파일에 대한 정보를 읽어 변수에 담았으니, ajax를 통해 서버에 전송 \r\n");
      out.write("			$.ajax({\r\n");
      out.write("// 				매핑된 Controll단 호출\r\n");
      out.write("// 				result로 파일 목록을 보내기 위해서 json 방식 사용\r\n");
      out.write("				url :\"uploadAjaxAction.json\"\r\n");
      out.write("// 				processData : true : 기본 key/value를 쿼리스트링으로 전송, false는 반대\r\n");
      out.write("				,processData : false\r\n");
      out.write("// 				contentType : 기본값- application/x-www-form-urlencoded; charset=UTF-8,\r\n");
      out.write("// 								첨부파일은 false : multipart/form-data로 전송됨\r\n");
      out.write("				,contentType : false\r\n");
      out.write("				,data : formData\r\n");
      out.write("				,type : \"post\"\r\n");
      out.write("				,success:function(result){\r\n");
      out.write("					alert(\"Uploaded\");\r\n");
      out.write("					console.log(\"@@result ==>\"+result);\r\n");
      out.write("// 					result 파일을 파라미터로 파일 목록을 출력하는 함수 실행\r\n");
      out.write("//					서버가 보낸 result는 List<AttachFileDTO>타입으로 json방식으로 받아야함 \r\n");
      out.write("					showUploadedFile(result);\r\n");
      out.write("// 					업로드후, 초기상태를 복제해놓은 cloneObj로 바꿔줌으로써 화면상의 초기화 \r\n");
      out.write("					$(\".uploadDiv\").html(cloneObj.html());\r\n");
      out.write("// 					업로드후, formData에 쌓인 업로드 데이터를 비우기위해 선언해놓은 초기화 메소드 실행\r\n");
      out.write("					clearFormData(formData);\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("			}); // end of ajax\r\n");
      out.write("			\r\n");
      out.write("		}); // end of btn onclick\r\n");
      out.write("			var uploadResult = $(\".uploadResult ul\");\r\n");
      out.write("		\r\n");
      out.write("// 		업로드 파일 목록 처리하는 function\r\n");
      out.write("		function showUploadedFile(uploadResultArr){\r\n");
      out.write("			console.log(\"@# uploadResultArr ==> \"+uploadResultArr);\r\n");
      out.write("			var str = \"\";\r\n");
      out.write("// 			업로드 파일 갯수만큼 반복\r\n");
      out.write("			$(uploadResultArr).each(function(i,obj){\r\n");
      out.write("// 				obj.fileName : 업로드 파일 이름\r\n");
      out.write("				if(!obj.image){\r\n");
      out.write("					str += \"<li><img src='./resources/image/attach.png'>\"+obj.fileName+\"</li>\";\r\n");
      out.write("				}else {\r\n");
      out.write("									\r\n");
      out.write("				str += \"<li>\"+obj.fileName+\"</li>\";\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			}); // end of each function\r\n");
      out.write("// 			div class에 파일 목록 추가\r\n");
      out.write("			uploadResult.append(str);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}); // end of ready function\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>Upload with Jquery</h1>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"uploadDiv\">\r\n");
      out.write("		<input type=\"file\" name=\"uploadFile\" multiple>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"uploadResult\">\r\n");
      out.write("		<ul>\r\n");
      out.write("			\r\n");
      out.write("		</ul>\r\n");
      out.write("	</div>\r\n");
      out.write("	<button id=\"uploadBtn\">Upload</button>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
